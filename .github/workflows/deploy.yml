name: Deploy Django App

on:
  # Dispara o workflow em todo push para a branch 'main'
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    # O workflow vai rodar em uma máquina virtual Linux fornecida pelo GitHub
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Clona seu repositório para a máquina virtual do GitHub
      - name: 1. Checkout do Código
        uses: actions/checkout@v3

      # Passo 2: Faz o login no Docker Hub usando os segredos que você configurou
      - name: 2. Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Passo 3: Constrói a imagem Docker a partir do seu Dockerfile e a envia para o Docker Hub
      - name: 3. Construir e Enviar Imagem Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/digicoin_teste:latest

      # Passo 4: Conecta ao seu servidor via SSH e executa os comandos de deploy
      - name: 4. Conectar no Servidor e Fazer Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Garante que a pasta do projeto exista no servidor
            cd /home/deployer/digicoin_project || mkdir -p /home/deployer/digicoin_project && cd /home/deployer/digicoin_project

            # (O código que cria o docker-compose.yml e o .env continua o mesmo daqui de cima)
            # ... cole aqui as seções "cat << EOF > docker-compose.yml" e "echo ... > .env" do seu arquivo atual ...
            
            # Baixa a versão mais recente da imagem da sua aplicação
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/digicoin_teste:latest
            
            # Sobe os serviços em background.
            docker compose up -d --remove-orphans

            # --- ABORDAGEM CORRIGIDA: ESPERA INTELIGENTE ---
            echo "Aguardando o banco de dados ficar pronto..."
            timeout=90 # Tempo máximo de espera em segundos
            # Este loop tenta executar 'mysqladmin ping' dentro do container 'db'.
            # Ele só continua quando o comando for bem-sucedido.
            while ! docker compose exec db mysqladmin ping -h"127.0.0.1" --silent; do
              sleep 3
              timeout=$(expr $timeout - 3)
              if [ $timeout -le 0 ]; then
                echo "Erro: Timeout esperando pelo banco de dados."
                # Mostra os logs do container do banco de dados para ajudar a depurar
                docker compose logs db
                exit 1
              fi
            done
            echo "✅ Banco de dados está pronto!"
            
            # Agora que temos certeza que o banco está no ar, executamos os comandos
            echo "Executando migrações do banco de dados..."
            docker compose exec -e DJANGO_SETTINGS_MODULE='Digicoin.settings.production' web python manage.py migrate --noinput
            
            echo "Criando usuários administradores padrão..."
            docker compose exec -e DJANGO_SETTINGS_MODULE='Digicoin.settings.production' web python manage.py create_admins
            
            echo "Coletando arquivos estáticos..."
            docker compose exec -e DJANGO_SETTINGS_MODULE='Digicoin.settings.production' web python manage.py collectstatic --noinput --clear